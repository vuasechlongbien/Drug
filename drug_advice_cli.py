import pyodbc
from fuzzywuzzy import fuzz
import re
import requests
from bs4 import BeautifulSoup

# 1. Chu·ªói k·∫øt n·ªëi
try:
    conn = pyodbc.connect(
        "DRIVER={SQL Server};"
        "SERVER=DESKTOP-JPU330S\\SQLEXPRESS;"
        "DATABASE=PHARMACY;"
        "Trusted_Connection=yes;"
    )
    cursor = conn.cursor()
except pyodbc.Error as e:
    print(f"L·ªói k·∫øt n·ªëi: {e}")
    exit()


# 2. H√†m chu·∫©n h√≥a vƒÉn b·∫£n
def normalize_text(text):
    text = text.lower().strip()
    text = re.sub(r'\s+', ' ', text)  # X√≥a d·∫•u c√°ch th·ª´a
    return text


# 3. T·ª´ ƒëi·ªÉn √°nh x·∫° tri·ªáu ch·ª©ng ti·∫øng Vi·ªát sang ti·∫øng Anh
symptom_translation = {
    "ƒëau b·ª•ng": "abdominal pain",
    "ƒëau ƒë·∫ßu": "headache",
    "bu·ªìn n√¥n": "nausea",
    "ch√≥ng m·∫∑t": "dizziness",
    "ƒëau chim": "penile pain",
    "ƒëau v√πng k√≠n": "genital pain",
    "s·ªët": "fever",
    "ho": "cough",
    "ƒëau ng·ª±c": "chest pain",
    "ƒëau ng·ª±c khi th·ªü": "chest pain",
    "ƒëau h·ªçng": "sore throat"
}


# 4. H√†m t√¨m tri·ªáu ch·ª©ng g·∫ßn ƒë√∫ng
def find_closest_disease(symptom, cursor, threshold=80):
    cursor.execute("SELECT name FROM Diseases")
    diseases = [row.name.lower() for row in cursor.fetchall()]
    symptom = normalize_text(symptom)

    best_match = None
    highest_score = 0
    for disease in diseases:
        score = fuzz.ratio(symptom, disease)
        if score > highest_score and score >= threshold:
            highest_score = score
            best_match = disease
    return best_match


# 5. H√†m t√¨m ki·∫øm tr√™n Drugs.com
def search_drugs_com(symptom_en):
    try:
        url = f"https://www.drugs.com/condition/{symptom_en.replace(' ', '-')}.html"
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        drug_elements = soup.select("div.contentBox a[href*='/mtm/']")

        if not drug_elements:
            return []

        drugs = []
        for elem in drug_elements[:3]:
            drug_name = elem.text.strip()
            drug_url = "https://www.drugs.com" + elem['href']
            drug_details = fetch_drug_details(drug_url, source="drugs.com")
            drugs.append({"name": drug_name, **drug_details})
        return drugs
    except requests.RequestException:
        return []


# 6. H√†m t√¨m ki·∫øm tr√™n MedlinePlus
def search_medlineplus(symptom_en):
    try:
        url = f"https://medlineplus.gov/ency/article/003094.htm"  # Trang chung v·ªÅ chest pain
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()

        drugs = [
            {"name": "Aspirin", "url": "https://medlineplus.gov/druginfo/meds/a682878.html"},
            {"name": "Nitroglycerin", "url": "https://medlineplus.gov/druginfo/meds/a601086.html"}
        ]

        result = []
        for drug in drugs[:3]:
            drug_details = fetch_drug_details(drug["url"], source="medlineplus")
            result.append({"name": drug["name"], **drug_details})
        return result
    except requests.RequestException:
        return []


# 7. H√†m t√¨m ki·∫øm web t·ªïng h·ª£p
def search_web_for_symptom(symptom):
    symptom = normalize_text(symptom)
    symptom_en = symptom_translation.get(symptom, None)
    if not symptom_en:
        print(
            f"\nüì° Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c tri·ªáu ch·ª©ng '{symptom}' trong t·ª´ ƒëi·ªÉn. C√≥ th·ªÉ thu·∫≠t ng·ªØ ch∆∞a chu·∫©n. Th·ª≠ nh·∫≠p l·∫°i (v√≠ d·ª•: 'ƒëau ng·ª±c khi th·ªü' thay cho 'ƒëau ng·ª±c') ho·∫∑c tham kh·∫£o b√°c sƒ©.")
        return []

    # Th·ª≠ Drugs.com tr∆∞·ªõc
    drugs = search_drugs_com(symptom_en)
    source = "Drugs.com"

    # N·∫øu Drugs.com th·∫•t b·∫°i, th·ª≠ MedlinePlus
    if not drugs:
        drugs = search_medlineplus(symptom_en)
        source = "MedlinePlus"

    if not drugs:
        print(
            f"\nüì° Kh√¥ng t√¨m th·∫•y g·ª£i √Ω thu·ªëc cho '{symptom}' ({symptom_en}) tr√™n {source}. Tri·ªáu ch·ª©ng n√†y c√≥ th·ªÉ c·∫ßn ch·∫©n ƒëo√°n c·ª• th·ªÉ. Th·ª≠ nh·∫≠p 'ƒëau ng·ª±c khi th·ªü' ho·∫∑c tham kh·∫£o b√°c sƒ©.")
        return []

    print(f"\nüì° G·ª£i √Ω t·ª´ {source} cho '{symptom}' ({symptom_en}):")
    for drug in drugs:
        print(f"\nüíä T√™n thu·ªëc: {drug['name']}")
        if drug.get("uses"):
            print(f"üåü C√¥ng d·ª•ng: {drug['uses']}")
        if drug.get("dosage"):
            print(f"üí° Li·ªÅu d√πng: {drug['dosage']}")
        if drug.get("side_effects"):
            print(f"‚ö†Ô∏è T√°c d·ª•ng ph·ª•: {drug['side_effects']}")
        if drug.get("instructions"):
            print(f"üìú H∆∞·ªõng d·∫´n: {drug['instructions']}")
        print("(Tham kh·∫£o b√°c sƒ© tr∆∞·ªõc khi d√πng)")

    # L∆∞u √Ω ƒë·∫∑c bi·ªát cho ƒëau ng·ª±c
    if symptom == "ƒëau ng·ª±c":
        print(
            "\n‚ö†Ô∏è L∆∞u √Ω: ƒêau ng·ª±c c√≥ th·ªÉ li√™n quan ƒë·∫øn c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng nh∆∞ ƒëau tim ho·∫∑c vi√™m ph·ªïi. H√£y g·ªçi c·∫•p c·ª©u n·∫øu ƒëau d·ªØ d·ªôi, k√®m kh√≥ th·ªü, ho·∫∑c ƒëau lan t·ªèa.")

    return drugs


# 8. H√†m l·∫•y chi ti·∫øt thu·ªëc
def fetch_drug_details(drug_url, source):
    try:
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
        response = requests.get(drug_url, headers=headers, timeout=5)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        details = {}

        if source == "drugs.com":
            uses_section = soup.find("h2", id="uses")
            details["uses"] = uses_section.find_next("p").text.strip()[
                              :200] + "..." if uses_section and uses_section.find_next("p") else "Kh√¥ng c√≥ th√¥ng tin."

            dosage_section = soup.find("h2", id="dosage")
            details["dosage"] = dosage_section.find_next("p").text.strip()[
                                :200] + "..." if dosage_section and dosage_section.find_next(
                "p") else "Kh√¥ng c√≥ th√¥ng tin."

            side_effects_section = soup.find("h2", id="side-effects")
            details["side_effects"] = side_effects_section.find_next("p").text.strip()[
                                      :200] + "..." if side_effects_section and side_effects.find_next(
                "p") else "Kh√¥ng c√≥ th√¥ng tin."

            instructions_section = soup.find("h2", id="precautions")
            details["instructions"] = instructions_section.find_next("p").text.strip()[
                                      :200] + "..." if instructions_section and instructions_section.find_next(
                "p") else "Kh√¥ng c√≥ th√¥ng tin."

        elif source == "medlineplus":
            # S·ª≠a DeprecationWarning: d√πng 'string' thay v√¨ 'text'
            uses_section = soup.find("h2", string="Why is this medication prescribed?")
            details["uses"] = uses_section.find_next("p").text.strip()[
                              :200] + "..." if uses_section and uses_section.find_next("p") else "Kh√¥ng c√≥ th√¥ng tin."

            dosage_section = soup.find("h2", string="How should this medicine be used?")
            details["dosage"] = dosage_section.find_next("p").text.strip()[
                                :200] + "..." if dosage_section and dosage_section.find_next(
                "p") else "Kh√¥ng c√≥ th√¥ng tin."

            side_effects_section = soup.find("h2", string="What side effects can this medication cause?")
            details["side_effects"] = side_effects_section.find_next("p").text.strip()[
                                      :200] + "..." if side_effects_section and side_effects_section.find_next(
                "p") else "Kh√¥ng c√≥ th√¥ng tin."

            # C·∫£i thi·ªán tr√≠ch xu·∫•t h∆∞·ªõng d·∫´n
            instructions_section = soup.find("h2",
                                             string="What should I know about storage and disposal of this medication?")
            details["instructions"] = instructions_section.find_next("p").text.strip()[
                                      :200] + "..." if instructions_section and instructions_section.find_next(
                "p") else "Kh√¥ng c√≥ th√¥ng tin."

        return details
    except requests.RequestException:
        return {"uses": "Kh√¥ng c√≥ th√¥ng tin.", "dosage": "Kh√¥ng c√≥ th√¥ng tin.",
                "side_effects": "Kh√¥ng c√≥ th√¥ng tin.", "instructions": "Kh√¥ng c√≥ th√¥ng tin."}


# 9. H√†m l·∫•y thu·ªëc khuy·∫øn c√°o d·ª±a tr√™n tri·ªáu ch·ª©ng
def recommend_medicines(symptom, cursor):
    symptom = normalize_text(symptom)

    # T√¨m b·ªánh l√Ω kh·ªõp ch√≠nh x√°c
    query = """
        SELECT disease_id, name
        FROM Diseases
        WHERE LOWER(name) = ?
    """
    cursor.execute(query, symptom)
    disease_row = cursor.fetchone()

    if not disease_row:
        # N·∫øu kh√¥ng kh·ªõp ch√≠nh x√°c, t√¨m kh·ªõp g·∫ßn ƒë√∫ng
        closest_disease = find_closest_disease(symptom, cursor)
        if closest_disease:
            print(f"Kh√¥ng t√¨m th·∫•y ch√≠nh x√°c '{symptom}', c√≥ ph·∫£i b·∫°n mu·ªën n√≥i '{closest_disease}'?")
            cursor.execute(query, closest_disease)
            disease_row = cursor.fetchone()
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·ªánh l√Ω cho tri·ªáu ch·ª©ng '{symptom}' trong c∆° s·ªü d·ªØ li·ªáu.")
            # T√¨m ki·∫øm web
            external_drugs = search_web_for_symptom(symptom)
            return [] if not external_drugs else []  # Tr·∫£ v·ªÅ r·ªóng v√¨ kh√¥ng ki·ªÉm tra t∆∞∆°ng t√°c

    disease_id, disease_name = disease_row
    print(f"\nüîç Tri·ªáu ch·ª©ng: {disease_name}")

    # L·∫•y danh s√°ch thu·ªëc t·ª´ b·∫£ng Prescription_Disease
    query = """
        SELECT p.prescription_id, p.name, p.effects, p.dosage, p.side_effects, p.instructions
        FROM Prescriptions p
        JOIN Prescription_Disease pd ON p.prescription_id = pd.prescription_id
        WHERE pd.disease_id = ?
    """
    cursor.execute(query, disease_id)
    medicines = cursor.fetchall()

    if not medicines:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thu·ªëc khuy·∫øn c√°o cho tri·ªáu ch·ª©ng n√†y.")
        return []

    print("\nüíä Thu·ªëc khuy·∫øn c√°o:")
    prescription_ids = []
    for row in medicines:
        prescription_ids.append(row.prescription_id)
        effect_lines = row.effects.split('|') if row.effects else ['']
        print(f"\nüíä T√™n thu·ªëc: {row.name}")
        print(f"üåü C√¥ng d·ª•ng: {effect_lines[0]}")
        if len(effect_lines) > 1:
            print(f"üìã Ch·ªâ ƒë·ªãnh: {effect_lines[1]}")
        print(f"üí° Li·ªÅu d√πng: {row.dosage}")
        print(f"‚ö†Ô∏è T√°c d·ª•ng ph·ª•: {row.side_effects}")
        if row.instructions:
            print(f"üìú H∆∞·ªõng d·∫´n: {row.instructions}")

    return prescription_ids


# 10. H√†m ki·ªÉm tra t∆∞∆°ng t√°c thu·ªëc
def check_drug_interactions(prescription_ids, cursor):
    print("\n‚ö†Ô∏è T∆∞∆°ng t√°c ph√°t hi·ªán:")
    interactions_found = False
    if len(prescription_ids) < 2:
        print("‚úÖ Ch·ªâ c√≥ m·ªôt thu·ªëc ƒë∆∞·ª£c khuy·∫øn c√°o, kh√¥ng c·∫ßn ki·ªÉm tra t∆∞∆°ng t√°c.")
        return

    # L·∫•y drug_id t∆∞∆°ng ·ª©ng
    drug_id_map = {}
    for prescription_id in prescription_ids:
        cursor.execute(
            "SELECT drug_id FROM Drug WHERE drug_name = (SELECT name FROM Prescriptions WHERE prescription_id = ?)",
            prescription_id)
        drug_id_row = cursor.fetchone()
        if drug_id_row:
            drug_id_map[prescription_id] = drug_id_row[0]

    # Ki·ªÉm tra t∆∞∆°ng t√°c
    for i in range(len(prescription_ids)):
        for j in range(i + 1, len(prescription_ids)):
            drug_id_1 = drug_id_map.get(prescription_ids[i])
            drug_id_2 = drug_id_map.get(prescription_ids[j])
            if drug_id_1 and drug_id_2 and drug_id_1 < drug_id_2:
                try:
                    cursor.execute("""
                        SELECT interaction_description, severity
                        FROM Drug_interaction
                        WHERE (drug_id_1 = ? AND drug_id_2 = ?)
                    """, (drug_id_1, drug_id_2))
                    for row in cursor.fetchall():
                        interactions_found = True
                        print(f"- {row.interaction_description} (**{row.severity}**)")
                except pyodbc.Error as e:
                    print(f"L·ªói ki·ªÉm tra t∆∞∆°ng t√°c gi·ªØa {drug_id_1} v√† {drug_id_2}: {e}")

    if not interactions_found:
        print("‚úÖ Kh√¥ng ph√°t hi·ªán t∆∞∆°ng t√°c nguy hi·ªÉm gi·ªØa c√°c thu·ªëc khuy·∫øn c√°o.")


# 11. H√†m ch√≠nh
def main():
    print("Ch∆∞∆°ng tr√¨nh H·ªó tr·ª£ Mua Thu·ªëc")
    symptom = input("\nNh·∫≠p tri·ªáu ch·ª©ng c·ªßa b·∫°n: ")
    prescription_ids = recommend_medicines(symptom, cursor)
    if prescription_ids:
        check_drug_interactions(prescription_ids, cursor)


# 12. Ch·∫°y ch∆∞∆°ng tr√¨nh v√† ƒë√≥ng k·∫øt n·ªëi
if __name__ == "__main__":
    try:
        main()
    finally:
        conn.close()